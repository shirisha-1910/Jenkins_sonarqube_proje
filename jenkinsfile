pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sirishassss/retail'  // Docker image name (replace with your username and image name)
        DOCKER_REGISTRY = 'https://hub.docker.com/u/sirishassss'  // DockerHub registry URL
        DOCKER_CREDENTIALS = '2be57122-9b3c-4daf-9649-c97dbe6395cb'  // Jenkins credentials ID for DockerHub login (replace with your actual Jenkins credentials ID)
        SONARQUBE_SERVER = 'retail-token'  // SonarQube server name as configured in Jenkins (replace with your SonarQube server)
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the latest code from GitHub
                git branch: 'main', url: 'https://github.com/shirisha-1910/Jenkins_sonarqube_proje.git'  // Replace with your GitHub repository URL
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis using SonarQube Scanner
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh ''' 
                        sonar-scanner \
                        -Dsonar.projectKey=retail-store-jenkins \
                        -Dsonar.projectName=retail-store-jenkins \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.tests=src/test/java \
                        -Dsonar.projectVersion=4.6.0.2311 \
                        -Dsonar.host.url=http://localhost:9000
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image from the Dockerfile in the repository
                    // Use the full image name with the registry URL
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Log in to DockerHub using Jenkins credentials
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}"
                    }

                    // Push the Docker image to DockerHub
                    sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Optional: Clean up intermediate Docker images and containers
                    sh "docker rmi ${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }
    }

    post {
        always {
            // Clean up any resources if necessary
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
