pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sirishassss/retail'  // Docker image name
        DOCKER_CREDENTIALS = '2be57122-9b3c-4daf-9649-c97dbe6395cb'  // Jenkins credentials ID for DockerHub login
        SONARQUBE_SERVER = 'retail-token'  // SonarQube server name as configured in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the latest code from GitHub
                git branch: 'main', url: 'https://github.com/shirisha-1910/Jenkins_sonarqube_proje.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis using SonarQube Scanner
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh ''' 
                        sonar-scanner \
                        -Dsonar.projectKey=retail-store-jenkins \
                        -Dsonar.projectName=retail-store-jenkins \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.tests=src/test/java \
                        -Dsonar.projectVersion=4.6.0.2311
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Get the current commit hash to tag the Docker image
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

                    // Check if Dockerfile exists before building
                    if (fileExists('Dockerfile')) {
                        // Build the Docker image
                        docker.build("${DOCKER_IMAGE_NAME}:${commitHash}")
                    } else {
                        error "Dockerfile not found!"
                    }
                }
            }
        }

        stage('Push Docker Image to DockerHub') {
            steps {
                script {
                    // Log in to DockerHub using Jenkins credentials and push the image
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        // Docker login
                        docker.withRegistry('https://hub.docker.com', "${DOCKER_CREDENTIALS}") {
                            def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            // Push the Docker image to DockerHub
                            docker.image("${DOCKER_IMAGE_NAME}:${commitHash}").push()
                        }
                    }
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    // Optional: Clean up intermediate Docker images
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    sh "docker rmi ${DOCKER_IMAGE_NAME}:${commitHash} || true"
                }
            }
        }
    }

    post {
        always {
            // Clean up any resources if necessary
            echo "Cleaning up..."
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
